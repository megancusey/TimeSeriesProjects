ggtitle("Classical multiplicative decomposition
of product A ")
autoplot(plastics)
autoplot(plastics)
plastics %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of product A ")
decomp_plastics <- decompose(plastics, type="multiplicative")
autoplot(plastics,series="Data") +
autolayer(seasadj(decomp_plastics), series="Seasonally Adjusted") +
xlab("Year") + ylab("Monthly Sales")
plastics
outlier.plastics[1] <- 5000
outlier.plastics <- plastics
outlier.plastics[1] <- 5000
decompose_outlier_plastics <- decompose(outlier.plastics, type="multiplicative")
autoplot(outlier.plastics, series="Data") +
autolayer(trendcycle(decompose_outlier_plastics), series="trend") +
autolayer(seasadj(decompose_outlier_plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
decompose_outlier_plastics <- decompose(outlier.plastics, type="multiplicative")
autoplot(outlier.plastics, series="Data") +
autolayer(trendcycle(decompose_outlier_plastics), series="trend") +
autolayer(seasadj(decompose_outlier_plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
outlier.plastics <- plastics
outlier.plastics[1] <- 2500
decompose_outlier_plastics <- decompose(outlier.plastics, type="multiplicative")
autoplot(outlier.plastics, series="Data") +
autolayer(trendcycle(decompose_outlier_plastics), series="trend") +
autolayer(seasadj(decompose_outlier_plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
outlier.plastics <- plastics
outlier.plastics[1] <- 1400
decompose_outlier_plastics <- decompose(outlier.plastics, type="multiplicative")
autoplot(outlier.plastics, series="Data") +
autolayer(trendcycle(decompose_outlier_plastics), series="trend") +
autolayer(seasadj(decompose_outlier_plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
autoplot(plastics,series="Data") +
autolayer(seasadj(decomp_plastics), series="Seasonally Adjusted") +
xlab("Year") + ylab("Monthly Sales")
outlier.middle.plastics <- plastics
outlier.middle.plastics
outlier.middle.plastics <- plastics
outlier.middle.plastics[30] <- 500
decompose.outlier.middle.plastics <- decompose(outlier.middle.plastics, type="multiplicative")
autoplot(outlier.middle.plastics, series="Data") +
autolayer(trendcycle(decompose.outlier.middle.plastics), series="trend") +
autolayer(seasadj(decompose.outlier.middle.plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
outlier.end.plastics <- plastics
outlier.end.plastics[59] <- 2000
decompose.outlier.end.plastics <- decompose(outlier.end.plastics, type="multiplicative")
autoplot(outlier.end.plastics, series="Data") +
autolayer(trendcycle(decompose.outlier.end.plastics), series="trend") +
autolayer(seasadj(decompose.outlier.end.plastics), series="seasonally adjusted") +
xlab("Year") + ylab("Monthly Sales")
rm(list = ls())
library(fma)
library(fpp2)
books.original <- books
autoplot(books.original)
autoplot(books.original) +
xlab("Day") +
ylab("Book Sales") +
ggtitle("Daily Book Sales for Paperback and Hardcover Books")
books.ses = ses(books.original, h=5)
autoplot(books.ses) +
autolayer(fitted(session.ses), series="Fitted")
books.ses = ses(books.original, h=5)
books.ses = ses(books.original, h=5)
books.original
books.ses = ses(books.original(,'Paperback'), h=5)
books.ses = ses(books.original$Paperback, h=5)
books.ses = ses(books.original[,'Paperback'], h=5)
books.ses.paperback = ses(books.original[,'Paperback'], h=5)
books.ses.hardcover = ses(books.original[,'Hardcover'], h=5)
autoplot(books.ses) +
autolayer(fitted(books.ses.paperback), series="Paperback Fitted") +
autolayer(fitted(books.ses.hardcover), series="Hardcover Fitted Data")
autoplot(books.original) +
autolayer(fitted(books.ses.paperback), series="Paperback Fitted") +
autolayer(fitted(books.ses.hardcover), series="Hardcover Fitted Data")
autoplot(books.ses.paperback) +
autolayer(fitted(books.ses.paperback), series="Paperback Fitted")
autoplot(books.ses.hardcover) +
autolayer(fitted(books.ses.hardcover), series="Hardcover Fitted Data")
round(accuracy(books.ses.paperback),2)
round(accuracy(books.ses.hardcover),2)
books.holt.paperback <- holt(books.original[,'Paperback'])
books.holt.hardcover <- holt(books.original[,'Hardcover'])
books.holt.paperback <- holt(books.original[,'Paperback'], h=4)
books.holt.hardcover <- holt(books.original[,'Hardcover'], h=4)
autoplot(books.original[,'Paperback']) +
autolayer(books.holt.paperback, series="Holt's Method", PI=FALSE)
autoplot(books.original[,'Hardcover']) +
autolayer(books.holt.hardcover, series="Holt's Method", PI=FALSE)
round(accuracy(books.holt.paperback),2)
round(accuracy(books.holt.hardcover),2)
round(accuracy(books.holt.hardcover),2)
View(books.ses.hardcover)
View(books.ses.hardcover)
autoplot(books.original[,'Paperback']) +
autolayer(books.holt.paperback, series="Holt's Method", PI=FALSE)
autoplot(books.ses.paperback) +
autolayer(fitted(books.ses.paperback), series="Paperback Fitted")
books.ses.paperback$upper[1,'95%']
books.ses.paperback$lower[1,'95%']
books.ses.paperback.rsme <- round(accuracy(books.ses.paperback),2)
## Paperback RSME = 33.64
books.ses.hardcover.rsme <- round(accuracy(books.ses.hardcover),2)
## Hardcover RSME = 31.93
books.holt.paperback.rsme <- round(accuracy(books.holt.paperback),2)
## Paperback RSME = 31.14
books.holt.hardcover.rsme <- round(accuracy(books.holt.hardcover),2)
## Hardcover RSME = 27.19
books.ses.paperback$mean+1.96*
##2
## The plastics data set consists of the monthly sales (in thousands)
## of product A for a plastics manufacturer for five years.
## a. Plot the time series of sales of product A.
##    Can you identify seasonal fluctuations and/or a trend-cycle?
autoplot(plastics)
plastics %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of product A ")
books.ses.paperback$upper[1,'95%']
books.ses.paperback$lower[1,'95%']
books.ses.paperback$mean+1.96* books.ses.paperback.rsme
books.ses.paperback$mean-1.96* books.ses.paperback.rsme
books.ses.paperback$mean + 1.96 * books.ses.paperback.rsme
books.ses.paperback$mean - 1.96 * books.ses.paperback.rsme
books.ses.paperback$mean[1] + 1.96 * books.ses.paperback.rsme
books.ses.paperback$mean[1] - 1.96 * books.ses.paperback.rsme
books.ses.paperback$mean[1] - 1.96 * books.ses.paperback.rsme
s <- sqrt(books.holt.paperback$model$mse)
s
View(books.holt.hardcover)
low <- books.holt.paperback$mean[1] - 1.96 * s
books.holt.hardcover
books.holt.paperback
c(low = low, high= high)
high <- books.holt.paperback$mean[1] + 1.96 * s
c(low = low, high= high)
s <- sqrt(books.holt.hardcover$model$mse)
high <- books.holt.hardcover$mean[1] + 1.96 * s
low <- books.holt.hardcover$mean[1] - 1.96 * s
books.holt.hardcover
c(low = low, high= high)
books.holt.paperback.level <- holt(books.original[,'Paperback'], h=4, level =95)
books.holt.paperback.level
books.holt.paperback
books.holt.hardcover
books.holt.paperback
rm(list = ls())
library(expsmooth)
## Chapter 8 Exercises 8 & 9
library(expsmooth)
library(forecast)
austa
library(fpp2)
austa
autoplot(austa)
autoplot(usgdp)
## Chapter 8 Exercises 8 & 9
library(expsmooth)
library(forecast)
library(fpp2)
library(urca)
austa %>% Arima(order=c(0,1,0), include.constant = FALSE)
austa %>% Arima(order=c(2,1,3), include.constant = TRUE)
austa %>% Arima(order=c(2,1,3), include.constant = TRUE) %>% forecast(h=10) %>% autoplot()
austa.auto.arima <- austa %>% auto.arima()
austa.auto.arima %>% summary()
## ARIMA(0,1,1) with drift
## AIC = -15.24
## AICc = -14.46
austa.auto.arima %>% forecast(h=10) %>% autoplot()
austa %>% Arima(order=c(2,1,0), include.constant = TRUE)
austa %>% Arima(order=c(2,1,0), include.constant = TRUE) %>% forecast(h=10) %>% autoplot()
##      AIC -13.42
##      AICc  -12.09
austa %>% Arima(order=c(2,1,3), include.constant = FALSE) %>% forecast(h=10) %>% autoplot()
##      AIC -13.42
##      AICc  -12.09
austa %>% Arima(order=c(0,0,1), include.constant = TRUE) %>% forecast(h=10) %>% autoplot()
austa %>% Arima(order=c(0,0,1), include.constant = TRUE)
austa %>% Arima(order=c(0,0,0), include.constant = TRUE) %>% forecast(h=10) %>% autoplot()
## AICc 108.03
## AIC 107.28
austa %>% Arima(order=c(0,0,0), include.constant = TRUE)
austa %>% Arima(order=c(0,2,1), include.constant = FALSE) %>% forecast(h=10) %>% autoplot()
## Chapter 8 Exercises 8 & 9
library(expsmooth)
library(forecast)
library(fpp2)
library(urca)
rm(list = ls())
autoplot(usgdp)
autoplot(BoxCox(usgpd, BoxCox.lambda(usgdp)))
## De-trend series and reduce variances
autoplot(BoxCox(usgdp, BoxCox.lambda(usgdp)))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% auto.arima()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% ggAcf()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% ggAcf()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% ggPacf()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% ur.kpss() %>% sumamry()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% ur.kpss() %>% summary()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,0), include.constant=FALSE)
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(3,1,0))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(1,1,0))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% auto.arima()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1)) %>% summary()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(3,1,0))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(1,1,0))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(1,1,1))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,2))
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% auto.arima()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1)) %>% checkresiduals()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1)) %>% forecast()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1)) %>% forecast() %>% autoplot()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>% arima(order=c(2,1,1)) %>% forecast(h=10) %>% autoplot()
BoxCox(usgdp, BoxCox.lambda(usgdp)) %>% diff() %>%  auto.arima() %>% forecast(h=10) %>% autoplot()
usgdp %>% ets %>% forecast(h=10) %>% autoplot()
usgdp %>% auto.arima() %>% forecast(h=10) %>% autoplot()
usgdp %>% ets %>% forecast(h=10) %>% autoplot()
## LOAD REQUIRED LIBRARIES
library(fpp2)
library(forecast)
library(urca)
##rm(list = ls())
## remove scientic notation
options(scipen = 999)
## Sometimes my working directory gets reset to my OneDrive so
## need to set wd when getting started.
wd <- "C:/Users/cusey/source/repos/TimeSeriesProjectts/TimeSeriesProjects/TimeSeriesProjects"
setwd(wd)
## Import CSV Data.
data <- read.csv("Revenue Data.csv", header = TRUE)
## Convert to Time Series Object
myts <- ts(data = data[, 'Revenue'], frequency = 12, start = c(2014, 7), end = c(2019, 8))
## Time Series Decomposition
myts %>% stl(t.window=13, s.window="periodic", robust=TRUE)
## Time Series Decomposition
myts %>% stl(t.window=13, s.window="periodic", robust=TRUE) %>% autoplot
fit.ARIMA <- myts.train %>% auto.arima()
## Split into Test/Train Data Sets
myts.train <- window(myts, start=c(2014,7), end=c(2018,08))
myts.test <-  window(myts, start=c(2018,09), end=c(2019,8))
myts.h <- 12
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA %>% forecast(h=myts.h) %>% autoplot
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA %>% forecast(h=myts.h) %>% autoplot
fit.MA <- myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE) +
xlab("Month/Year") + ylab("Revenue") + ggtitle("ARIMA Results")
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h) %>% autoplot
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <- myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE) +
xlab("Month/Year") + ylab("Revenue") + ggtitle("ARIMA Results")
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h) %>% autoplot
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <- myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <- myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
fit.ARIMA <- myts %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.ARIMA <- myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <- myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
fit.ARIMA <-  auto.arima(myts.train)
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
fit.ARIMA <-  auto.arima(myts.train)
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <- myts.train %>% Arima(order=c(1,1,0), include.constant = TRUE)
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <- myts.train %>% Arima(order=c(0,1,1), include.constant = TRUE)
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
## Time Series Decomposition
myts.stl <- myts %>% stl(t.window=13, s.window="periodic", robust=TRUE) %>% autoplot
## Time Series Decomposition
myts.stl <- myts %>% stl(t.window=13, s.window="periodic", robust=TRUE) %>% autoplot
seasadj(myts.stl) %>% diff() %>% ggAcf()
myts.stl <- seasadj() %>% diff() %>% ggAcf()
View(myts.stl)
View(myts.stl)
myts %>% seasadj() %>% diff() %>% ggAcf()
myts.stl <- myts %>% stl(t.window=13, s.window="periodic", robust=TRUE)
## ACF
myts.stl %>% seasadj() %>% diff() %>% ggAcf()
myts.stl %>% seasadj() %>% diff() %>% ggAcf()
myts %>% seasadj %>% diff() %>% ggPacf()
## ACF
myts.stl %>% seasadj() %>% ggAcf()
myts %>% seasadj %>%  ggPacf()
fit.ARIMA <-  myts.stl %>% seasadj()  %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
## ACF
myts.stl %>% seasadj() %>% ggAcf()
myts %>% seasadj %>%  ggPacf()
fit.ARIMA <-  myts.stl %>% seasadj()  %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <-  myts.stl %>% seasadj() %>% Arima(order=c(1,1,0), include.constant = TRUE)
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <-  myts.stl %>% seasadj() %>% Arima(order=c(0,1,1), include.constant = TRUE)
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
## ACF
myts %>% diff() %>% ggAcf()
myts %>% diff() %>% ggPacf()
fit.ARIMA <-  myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(fit.ARIMA.forecast, myts.test)
summary(fit.ARIMA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
## Figure XX
checkresiduals(fit.MA.forecast)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
accuracy(fit.ARIMA.forecast)
fit.ARIMA %>% forecast(h=myts.h) %>%
accuracy(myts.test)
fit.ARIMA
fit.ARIMA <-  myts.train %>% auto.arima()
rm(list = ls())
## LOAD REQUIRED LIBRARIES
library(fpp2)
library(forecast)
library(urca)
##rm(list = ls())
## remove scientic notation
options(scipen = 999)
## Sometimes my working directory gets reset to my OneDrive so
## need to set wd when getting started.
wd <- "C:/Users/cusey/source/repos/TimeSeriesProjectts/TimeSeriesProjects/TimeSeriesProjects"
setwd(wd)
## Import CSV Data.
data <- read.csv("Revenue Data.csv", header = TRUE)
## Convert to Time Series Object
myts <- ts(data = data[, 'Revenue'], frequency = 12, start = c(2014, 7), end = c(2019, 8))
replace.outlier <- mean(c(13760762315,33983939406))
myts[41] <- replace.outlier
## Plot Original Data W/ Smoothed Outlier
autoplot(myts) + xlab("Month/Year") + ylab("Monthly Revenue")+ggtitle("Time Plot of Revenue")
######################################################
## Split into Test/Train Data Sets
myts.train <- window(myts, start=c(2014,7), end=c(2018,08))
myts.test <-  window(myts, start=c(2018,09), end=c(2019,8))
myts.h <- 12
fit.ARIMA <-  myts.train %>% auto.arima()
fit.ARIMA
fit.ARIMA %>% forecast(h=myts.h) %>% autoplot()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h) %>% autoplot()
## FIGURE XX
autoplot(myts) +
##  autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
##  autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
autoplot(myts) +
##  autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
##  autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
fit.ARIMA <-  myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <-  myts.stl %>% seasadj() %>% Arima(order=c(1,1,0), include.constant = TRUE)
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <-  myts.stl %>% seasadj() %>% Arima(order=c(0,1,1), include.constant = TRUE)
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
## LOAD REQUIRED LIBRARIES
library(fpp2)
library(forecast)
library(urca)
fit.AR <-  myts.stl %>% seasadj() %>% Arima(order=c(1,1,0), include.constant = TRUE)
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
fit.ARIMA <-  myts.train %>% auto.arima()
fit.ARIMA.forecast <- fit.ARIMA %>% forecast(h=myts.h)
accuracy(myts.test)
summary(fit.ARIMA,myts.test)
fit.AR <-  myts.train %>% Arima(order=c(1,1,0), include.constant = TRUE)
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <-  myts.train %>% Arima(order=c(0,1,1), include.constant = TRUE)
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
fit.AR <-  myts.train %>% Arima(order=c(1,1,0))
fit.AR.forecast <- fit.AR %>% forecast(h=myts.h)
summary(fit.AR,myts.test)
fit.MA <-  myts.train %>% Arima(order=c(0,1,1))
fit.MA.forecast <- fit.MA %>% forecast(h=myts.h)
summary(fit.MA,myts.test)
## FIGURE XX
autoplot(myts) +
autolayer(fit.MA.forecast, series = "Moving Average", PI = FALSE) +
autolayer(fit.AR.forecast, series = "Autoregression", PI = FALSE) +
autolayer(fit.ARIMA.forecast, series = "ARIMA", PI = FALSE)
summary(fit.ARIMA,myts.test)
